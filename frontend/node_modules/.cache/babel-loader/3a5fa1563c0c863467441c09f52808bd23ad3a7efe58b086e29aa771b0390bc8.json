{"ast":null,"code":"import React, { useState, useEffect, useCallback, useMemo, useLayoutEffect } from 'react';\nimport { useThemeUI, jsx, __ThemeUIInternalBaseThemeProvider } from '@theme-ui/core';\nimport { css, get } from '@theme-ui/css';\nimport { Global } from '@emotion/react';\nconst toVarName = key => `--theme-ui-${key.replace('-__default', '')}`;\nconst toVarValue = key => `var(${toVarName(key)})`;\nconst join = (...args) => args.filter(Boolean).join('-');\nconst reservedKeys = new Set(['useCustomProperties', 'initialColorModeName', 'printColorModeName', 'initialColorMode', 'useLocalStorage', 'config']); // convert theme values to custom properties\n\nconst toCustomProperties = (obj, parent) => {\n  const next = Array.isArray(obj) ? [] : {};\n  for (let key in obj) {\n    const value = obj[key];\n    const name = join(parent, key);\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name);\n      continue;\n    }\n    if (reservedKeys.has(key)) {\n      next[key] = value;\n      continue;\n    }\n    next[key] = toVarValue(name);\n  }\n  return next;\n};\n/**\n * @internal\n * Recursively transforms an object into CSS variables excluding \"modes\" key.\n */\n\nconst __objectToVars = (parent, obj) => {\n  let vars = {};\n  for (let key in obj) {\n    if (key === 'modes') continue;\n    const name = join(parent, key);\n    const value = obj[key];\n    if (value && typeof value === 'object') {\n      vars = {\n        ...vars,\n        ...__objectToVars(name, value)\n      };\n    } else {\n      vars[toVarName(name)] = value;\n    }\n  }\n  return vars;\n};\n/**\n * @internal\n * Creates root styles for color modes.\n * - Transforms color scale into CSS variables.\n * - Sets background and text color.\n */\n\nconst __createColorStyles = (theme = {}) => {\n  const {\n    useCustomProperties,\n    initialColorModeName,\n    printColorModeName,\n    useRootStyles\n  } = theme.config || theme || {};\n  const colors = theme.rawColors || theme.colors;\n  if (!colors || useRootStyles === false) return {};\n  if (useCustomProperties === false) {\n    return css({\n      color: 'text',\n      bg: 'background'\n    })(theme);\n  }\n  const modes = colors.modes || {};\n  const styles = __createColorProperties(colors, modes);\n  if (printColorModeName) {\n    const mode = printColorModeName === 'initial' || printColorModeName === initialColorModeName ? colors : modes[printColorModeName];\n    styles['@media print'] = __objectToVars('colors', mode);\n  }\n  const colorToVarValue = color => toVarValue(`colors-${color}`);\n  return css({\n    ...styles,\n    color: colorToVarValue('text'),\n    bg: colorToVarValue('background')\n  })(theme);\n};\n/**\n * @internal\n * Returns an object with colors turned into Custom CSS Properties and\n * .theme-ui-<colormode> classes used for no-flash serverside rendering.\n */\n\nfunction __createColorProperties(colors, modes) {\n  const styles = __objectToVars('colors', colors);\n  Object.keys(modes).forEach(mode => {\n    const className = `.theme-ui-${mode}`;\n    const key = `&${className}, ${className} &`;\n    styles[key] = __objectToVars('colors', modes[mode]);\n  });\n  return styles;\n}\nconst STORAGE_KEY = 'theme-ui-color-mode';\nconst DARK_QUERY = '(prefers-color-scheme: dark)';\nconst LIGHT_QUERY = '(prefers-color-scheme: light)';\nconst storage = {\n  get: () => {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  },\n  set: value => {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  }\n};\nconst getPreferredColorScheme = () => {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    if (window.matchMedia(DARK_QUERY).matches) {\n      return 'dark';\n    }\n    if (window.matchMedia(LIGHT_QUERY).matches) {\n      return 'light';\n    }\n  }\n  return null;\n};\nconst useClientsideEffect = typeof window === 'undefined' ? () => {} : useLayoutEffect;\nconst TopLevelColorModeProvider = ({\n  outerCtx,\n  children\n}) => {\n  const outerTheme = outerCtx.theme || {};\n  const {\n    initialColorModeName,\n    useColorSchemeMediaQuery,\n    useLocalStorage\n  } = outerTheme.config || outerTheme;\n  let [colorMode, setColorMode] = useState(() => {\n    const preferredMode = useColorSchemeMediaQuery !== false && getPreferredColorScheme();\n    return preferredMode || initialColorModeName;\n  }); // on first render, we read the color mode from localStorage and\n  // clear the class on document element body\n\n  useClientsideEffect(() => {\n    const stored = useLocalStorage !== false && storage.get();\n    if (typeof document !== 'undefined') {\n      document.documentElement.classList.remove('theme-ui-' + stored);\n    }\n    if (useColorSchemeMediaQuery !== 'system' && stored && stored !== colorMode) {\n      colorMode = stored;\n      setColorMode(stored);\n    }\n  }, []); // when mode changes, we save it to localStorage\n\n  useEffect(() => {\n    if (colorMode && useLocalStorage !== false) {\n      storage.set(colorMode);\n    }\n  }, [colorMode, useLocalStorage]);\n  const setPreferredColorScheme = useCallback(() => {\n    const preferredColorScheme = getPreferredColorScheme();\n    setColorMode(preferredColorScheme || initialColorModeName);\n  }, [initialColorModeName]);\n  useEffect(() => {\n    if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n      // It doesn't matter if we add the listener only to the dark media query\n      // Because in our callback function we'll check for both media queries (light and dark).\n      const darkMQL = window.matchMedia(DARK_QUERY);\n      if (typeof darkMQL.addEventListener === 'function') {\n        darkMQL.addEventListener('change', setPreferredColorScheme);\n      } else if (typeof darkMQL.addListener === 'function') {\n        darkMQL.addListener(setPreferredColorScheme);\n      }\n    }\n    return () => {\n      if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n        const darkMQL = window.matchMedia(DARK_QUERY);\n        if (typeof darkMQL.removeEventListener === 'function') {\n          darkMQL.removeEventListener('change', setPreferredColorScheme);\n        } else if (typeof darkMQL.removeListener === 'function') {\n          darkMQL.removeListener(setPreferredColorScheme);\n        }\n      }\n    };\n  }, [useColorSchemeMediaQuery, setPreferredColorScheme]);\n  if (process.env.NODE_ENV !== 'production') {\n    var _outerTheme$colors;\n    if ((_outerTheme$colors = outerTheme.colors) != null && _outerTheme$colors.modes && initialColorModeName && Object.keys(outerTheme.colors.modes).indexOf(initialColorModeName) > -1) {\n      console.warn('[theme-ui] The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');\n    }\n  }\n  const newTheme = useThemeWithAppliedColorMode({\n    colorMode,\n    outerTheme\n  });\n  const newCtx = {\n    ...outerCtx,\n    theme: newTheme,\n    colorMode,\n    setColorMode\n  };\n  return /*#__PURE__*/React.createElement(__ThemeUIInternalBaseThemeProvider, {\n    context: newCtx\n  }, /*#__PURE__*/React.createElement(GlobalColorStyles, {\n    theme: newTheme\n  }), children);\n};\nfunction useColorMode() {\n  const {\n    colorMode,\n    setColorMode\n  } = useThemeUI();\n  if (typeof setColorMode !== 'function') {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`);\n  } // We're allowing the user to specify a narrower type for its color mode name.\n\n  return [colorMode, setColorMode];\n}\nconst omitModes = colors => {\n  const res = {\n    ...colors\n  };\n  delete res.modes;\n  return res;\n};\nfunction copyRawColors(colors, outerThemeRawColors) {\n  for (const [key, value] of Object.entries(colors)) {\n    if (typeof value === 'string' && !value.startsWith('var(')) {\n      outerThemeRawColors[key] = value;\n    } else if (typeof value === 'object') {\n      const newValue = {\n        ...outerThemeRawColors[key]\n      };\n      copyRawColors(value, newValue);\n      outerThemeRawColors[key] = newValue;\n    }\n  }\n}\nfunction useThemeWithAppliedColorMode({\n  outerTheme,\n  colorMode\n}) {\n  const theme = useMemo(() => {\n    const res = {\n      ...outerTheme\n    };\n    const modes = get(res, 'colors.modes', {});\n    const currentColorMode = get(modes, colorMode, {});\n    if (colorMode) {\n      res.colors = {\n        ...res.colors,\n        ...currentColorMode\n      };\n    }\n    const {\n      useCustomProperties,\n      initialColorModeName = '__default'\n    } = outerTheme.config || outerTheme;\n    let outerThemeRawColors = outerTheme.rawColors || outerTheme.colors || {};\n    if (useCustomProperties !== false) {\n      const alreadyHasRawColors = res.rawColors != null;\n      const colors = res.colors || {};\n      if (alreadyHasRawColors) {\n        outerThemeRawColors = {\n          ...outerThemeRawColors\n        };\n        copyRawColors(colors, outerThemeRawColors);\n        if (outerThemeRawColors.modes) {\n          outerThemeRawColors.modes[initialColorModeName] = omitModes(outerThemeRawColors);\n        }\n        res.rawColors = outerThemeRawColors;\n      } else {\n        if (!('modes' in outerThemeRawColors)) {\n          res.rawColors = colors;\n        } else {\n          const modes = {\n            [initialColorModeName]: omitModes(outerThemeRawColors),\n            ...outerThemeRawColors.modes\n          };\n          res.rawColors = {\n            ...colors,\n            modes\n          };\n          /* modes doesn't match index signature by design */\n        }\n      }\n\n      res.colors = toCustomProperties(omitModes(outerThemeRawColors), 'colors');\n    }\n    return res;\n  }, [colorMode, outerTheme]);\n  return theme;\n}\nfunction GlobalColorStyles({\n  theme\n}) {\n  return jsx(Global, {\n    styles: () => {\n      return {\n        html: __createColorStyles(theme)\n      };\n    }\n  });\n}\nfunction NestedColorModeProvider({\n  outerCtx,\n  children\n}) {\n  var _newTheme$config2;\n  const newTheme = useThemeWithAppliedColorMode({\n    outerTheme: outerCtx.theme,\n    colorMode: outerCtx.colorMode\n  }); // Nested theme providers need to be rerendered after hydration for the correct\n  // color mode to apply.\n\n  const [needsRerender, setNeedsRerender] = useState(\n  // Note: we could also check some \"ssr-enabled\" flag as an optimization for\n  // SPAs, as deeply nested theme providers will also pay a performance penalty\n  // for this SSR bug fix\n  () => {\n    var _newTheme$config;\n    return ((_newTheme$config = newTheme.config) == null ? void 0 : _newTheme$config.useLocalStorage) !== false;\n  });\n  useClientsideEffect(() => void setNeedsRerender(false), []);\n  const themeColors = newTheme.rawColors || newTheme.colors;\n  const useCustomProperties = (_newTheme$config2 = newTheme.config) == null ? void 0 : _newTheme$config2.useCustomProperties;\n  const colorVars = useMemo(() => {\n    if (useCustomProperties === false) {\n      return {};\n    }\n    const colors = themeColors || {};\n    return css(__createColorProperties(colors, colors.modes || {}))(newTheme);\n  }, [newTheme, themeColors, useCustomProperties]);\n  return /*#__PURE__*/React.createElement(__ThemeUIInternalBaseThemeProvider, {\n    context: {\n      ...outerCtx,\n      theme: newTheme\n    }\n  }, jsx('div', {\n    'data-themeui-nested-provider': true,\n    // the key here ensures that children will be rerendered after color\n    // mode is read from localStorage\n    key: Number(needsRerender),\n    suppressHydrationWarning: true,\n    css: colorVars,\n    children\n  }));\n}\nconst ColorModeProvider = ({\n  children\n}) => {\n  const outerCtx = useThemeUI();\n  const isTopLevelColorModeProvider = typeof outerCtx.setColorMode !== 'function';\n  return isTopLevelColorModeProvider ? /*#__PURE__*/React.createElement(TopLevelColorModeProvider, {\n    outerCtx: outerCtx\n  }, children) : /*#__PURE__*/React.createElement(NestedColorModeProvider, {\n    outerCtx: outerCtx\n  }, children);\n};\nconst noflash = `(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n} catch (e) {} })();`;\nconst InitializeColorMode = () => jsx('script', {\n  key: 'theme-ui-no-flash',\n  dangerouslySetInnerHTML: {\n    __html: noflash\n  }\n});\nexport { ColorModeProvider, InitializeColorMode, useColorMode };","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useLayoutEffect","useThemeUI","jsx","__ThemeUIInternalBaseThemeProvider","css","get","Global","toVarName","key","replace","toVarValue","join","args","filter","Boolean","reservedKeys","Set","toCustomProperties","obj","parent","next","Array","isArray","value","name","has","__objectToVars","vars","__createColorStyles","theme","useCustomProperties","initialColorModeName","printColorModeName","useRootStyles","config","colors","rawColors","color","bg","modes","styles","__createColorProperties","mode","colorToVarValue","Object","keys","forEach","className","STORAGE_KEY","DARK_QUERY","LIGHT_QUERY","storage","window","localStorage","getItem","err","console","warn","set","setItem","getPreferredColorScheme","matchMedia","matches","useClientsideEffect","TopLevelColorModeProvider","outerCtx","children","outerTheme","useColorSchemeMediaQuery","useLocalStorage","colorMode","setColorMode","preferredMode","stored","document","documentElement","classList","remove","setPreferredColorScheme","preferredColorScheme","darkMQL","addEventListener","addListener","removeEventListener","removeListener","process","env","NODE_ENV","_outerTheme$colors","indexOf","newTheme","useThemeWithAppliedColorMode","newCtx","createElement","context","GlobalColorStyles","useColorMode","Error","omitModes","res","copyRawColors","outerThemeRawColors","entries","startsWith","newValue","currentColorMode","alreadyHasRawColors","html","NestedColorModeProvider","_newTheme$config2","needsRerender","setNeedsRerender","_newTheme$config","themeColors","colorVars","Number","suppressHydrationWarning","ColorModeProvider","isTopLevelColorModeProvider","noflash","InitializeColorMode","dangerouslySetInnerHTML","__html"],"sources":["/Users/tnguyen/Desktop/SJSU/CS152/Project/FullStackRateMyNFT/frontend/node_modules/@theme-ui/color-modes/dist/theme-ui-color-modes.esm.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo, useLayoutEffect } from 'react';\nimport { useThemeUI, jsx, __ThemeUIInternalBaseThemeProvider } from '@theme-ui/core';\nimport { css, get } from '@theme-ui/css';\nimport { Global } from '@emotion/react';\n\nconst toVarName = key => `--theme-ui-${key.replace('-__default', '')}`;\n\nconst toVarValue = key => `var(${toVarName(key)})`;\n\nconst join = (...args) => args.filter(Boolean).join('-');\n\nconst reservedKeys = new Set(['useCustomProperties', 'initialColorModeName', 'printColorModeName', 'initialColorMode', 'useLocalStorage', 'config']); // convert theme values to custom properties\n\nconst toCustomProperties = (obj, parent) => {\n  const next = Array.isArray(obj) ? [] : {};\n\n  for (let key in obj) {\n    const value = obj[key];\n    const name = join(parent, key);\n\n    if (value && typeof value === 'object') {\n      next[key] = toCustomProperties(value, name);\n      continue;\n    }\n\n    if (reservedKeys.has(key)) {\n      next[key] = value;\n      continue;\n    }\n\n    next[key] = toVarValue(name);\n  }\n\n  return next;\n};\n/**\n * @internal\n * Recursively transforms an object into CSS variables excluding \"modes\" key.\n */\n\nconst __objectToVars = (parent, obj) => {\n  let vars = {};\n\n  for (let key in obj) {\n    if (key === 'modes') continue;\n    const name = join(parent, key);\n    const value = obj[key];\n\n    if (value && typeof value === 'object') {\n      vars = { ...vars,\n        ...__objectToVars(name, value)\n      };\n    } else {\n      vars[toVarName(name)] = value;\n    }\n  }\n\n  return vars;\n};\n/**\n * @internal\n * Creates root styles for color modes.\n * - Transforms color scale into CSS variables.\n * - Sets background and text color.\n */\n\nconst __createColorStyles = (theme = {}) => {\n  const {\n    useCustomProperties,\n    initialColorModeName,\n    printColorModeName,\n    useRootStyles\n  } = theme.config || theme || {};\n  const colors = theme.rawColors || theme.colors;\n  if (!colors || useRootStyles === false) return {};\n\n  if (useCustomProperties === false) {\n    return css({\n      color: 'text',\n      bg: 'background'\n    })(theme);\n  }\n\n  const modes = colors.modes || {};\n\n  const styles = __createColorProperties(colors, modes);\n\n  if (printColorModeName) {\n    const mode = printColorModeName === 'initial' || printColorModeName === initialColorModeName ? colors : modes[printColorModeName];\n    styles['@media print'] = __objectToVars('colors', mode);\n  }\n\n  const colorToVarValue = color => toVarValue(`colors-${color}`);\n\n  return css({ ...styles,\n    color: colorToVarValue('text'),\n    bg: colorToVarValue('background')\n  })(theme);\n};\n/**\n * @internal\n * Returns an object with colors turned into Custom CSS Properties and\n * .theme-ui-<colormode> classes used for no-flash serverside rendering.\n */\n\nfunction __createColorProperties(colors, modes) {\n  const styles = __objectToVars('colors', colors);\n\n  Object.keys(modes).forEach(mode => {\n    const className = `.theme-ui-${mode}`;\n    const key = `&${className}, ${className} &`;\n    styles[key] = __objectToVars('colors', modes[mode]);\n  });\n  return styles;\n}\n\nconst STORAGE_KEY = 'theme-ui-color-mode';\nconst DARK_QUERY = '(prefers-color-scheme: dark)';\nconst LIGHT_QUERY = '(prefers-color-scheme: light)';\nconst storage = {\n  get: () => {\n    try {\n      return window.localStorage.getItem(STORAGE_KEY);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  },\n  set: value => {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, value);\n    } catch (err) {\n      console.warn('localStorage is disabled and color mode might not work as expected.', 'Please check your Site Settings.', err);\n    }\n  }\n};\n\nconst getPreferredColorScheme = () => {\n  if (typeof window !== 'undefined' && window.matchMedia) {\n    if (window.matchMedia(DARK_QUERY).matches) {\n      return 'dark';\n    }\n\n    if (window.matchMedia(LIGHT_QUERY).matches) {\n      return 'light';\n    }\n  }\n\n  return null;\n};\n\nconst useClientsideEffect = typeof window === 'undefined' ? () => {} : useLayoutEffect;\n\nconst TopLevelColorModeProvider = ({\n  outerCtx,\n  children\n}) => {\n  const outerTheme = outerCtx.theme || {};\n  const {\n    initialColorModeName,\n    useColorSchemeMediaQuery,\n    useLocalStorage\n  } = outerTheme.config || outerTheme;\n  let [colorMode, setColorMode] = useState(() => {\n    const preferredMode = useColorSchemeMediaQuery !== false && getPreferredColorScheme();\n    return preferredMode || initialColorModeName;\n  }); // on first render, we read the color mode from localStorage and\n  // clear the class on document element body\n\n  useClientsideEffect(() => {\n    const stored = useLocalStorage !== false && storage.get();\n\n    if (typeof document !== 'undefined') {\n      document.documentElement.classList.remove('theme-ui-' + stored);\n    }\n\n    if (useColorSchemeMediaQuery !== 'system' && stored && stored !== colorMode) {\n      colorMode = stored;\n      setColorMode(stored);\n    }\n  }, []); // when mode changes, we save it to localStorage\n\n  useEffect(() => {\n    if (colorMode && useLocalStorage !== false) {\n      storage.set(colorMode);\n    }\n  }, [colorMode, useLocalStorage]);\n  const setPreferredColorScheme = useCallback(() => {\n    const preferredColorScheme = getPreferredColorScheme();\n    setColorMode(preferredColorScheme || initialColorModeName);\n  }, [initialColorModeName]);\n  useEffect(() => {\n    if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n      // It doesn't matter if we add the listener only to the dark media query\n      // Because in our callback function we'll check for both media queries (light and dark).\n      const darkMQL = window.matchMedia(DARK_QUERY);\n\n      if (typeof darkMQL.addEventListener === 'function') {\n        darkMQL.addEventListener('change', setPreferredColorScheme);\n      } else if (typeof darkMQL.addListener === 'function') {\n        darkMQL.addListener(setPreferredColorScheme);\n      }\n    }\n\n    return () => {\n      if (useColorSchemeMediaQuery === 'system' && window.matchMedia) {\n        const darkMQL = window.matchMedia(DARK_QUERY);\n\n        if (typeof darkMQL.removeEventListener === 'function') {\n          darkMQL.removeEventListener('change', setPreferredColorScheme);\n        } else if (typeof darkMQL.removeListener === 'function') {\n          darkMQL.removeListener(setPreferredColorScheme);\n        }\n      }\n    };\n  }, [useColorSchemeMediaQuery, setPreferredColorScheme]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    var _outerTheme$colors;\n\n    if ((_outerTheme$colors = outerTheme.colors) != null && _outerTheme$colors.modes && initialColorModeName && Object.keys(outerTheme.colors.modes).indexOf(initialColorModeName) > -1) {\n      console.warn('[theme-ui] The `initialColorModeName` value should be a unique name' + ' and cannot reference a key in `theme.colors.modes`.');\n    }\n  }\n\n  const newTheme = useThemeWithAppliedColorMode({\n    colorMode,\n    outerTheme\n  });\n  const newCtx = { ...outerCtx,\n    theme: newTheme,\n    colorMode,\n    setColorMode\n  };\n  return /*#__PURE__*/React.createElement(__ThemeUIInternalBaseThemeProvider, {\n    context: newCtx\n  }, /*#__PURE__*/React.createElement(GlobalColorStyles, {\n    theme: newTheme\n  }), children);\n};\n\nfunction useColorMode() {\n  const {\n    colorMode,\n    setColorMode\n  } = useThemeUI();\n\n  if (typeof setColorMode !== 'function') {\n    throw new Error(`[useColorMode] requires the ColorModeProvider component`);\n  } // We're allowing the user to specify a narrower type for its color mode name.\n\n\n  return [colorMode, setColorMode];\n}\n\nconst omitModes = colors => {\n  const res = { ...colors\n  };\n  delete res.modes;\n  return res;\n};\n\nfunction copyRawColors(colors, outerThemeRawColors) {\n  for (const [key, value] of Object.entries(colors)) {\n    if (typeof value === 'string' && !value.startsWith('var(')) {\n      outerThemeRawColors[key] = value;\n    } else if (typeof value === 'object') {\n      const newValue = { ...outerThemeRawColors[key]\n      };\n      copyRawColors(value, newValue);\n      outerThemeRawColors[key] = newValue;\n    }\n  }\n}\n\nfunction useThemeWithAppliedColorMode({\n  outerTheme,\n  colorMode\n}) {\n  const theme = useMemo(() => {\n    const res = { ...outerTheme\n    };\n    const modes = get(res, 'colors.modes', {});\n    const currentColorMode = get(modes, colorMode, {});\n\n    if (colorMode) {\n      res.colors = { ...res.colors,\n        ...currentColorMode\n      };\n    }\n\n    const {\n      useCustomProperties,\n      initialColorModeName = '__default'\n    } = outerTheme.config || outerTheme;\n    let outerThemeRawColors = outerTheme.rawColors || outerTheme.colors || {};\n\n    if (useCustomProperties !== false) {\n      const alreadyHasRawColors = res.rawColors != null;\n      const colors = res.colors || {};\n\n      if (alreadyHasRawColors) {\n        outerThemeRawColors = { ...outerThemeRawColors\n        };\n        copyRawColors(colors, outerThemeRawColors);\n\n        if (outerThemeRawColors.modes) {\n          outerThemeRawColors.modes[initialColorModeName] = omitModes(outerThemeRawColors);\n        }\n\n        res.rawColors = outerThemeRawColors;\n      } else {\n        if (!('modes' in outerThemeRawColors)) {\n          res.rawColors = colors;\n        } else {\n          const modes = {\n            [initialColorModeName]: omitModes(outerThemeRawColors),\n            ...outerThemeRawColors.modes\n          };\n          res.rawColors = { ...colors,\n            modes\n          };\n          /* modes doesn't match index signature by design */\n        }\n      }\n\n      res.colors = toCustomProperties(omitModes(outerThemeRawColors), 'colors');\n    }\n\n    return res;\n  }, [colorMode, outerTheme]);\n  return theme;\n}\n\nfunction GlobalColorStyles({\n  theme\n}) {\n  return jsx(Global, {\n    styles: () => {\n      return {\n        html: __createColorStyles(theme)\n      };\n    }\n  });\n}\n\nfunction NestedColorModeProvider({\n  outerCtx,\n  children\n}) {\n  var _newTheme$config2;\n\n  const newTheme = useThemeWithAppliedColorMode({\n    outerTheme: outerCtx.theme,\n    colorMode: outerCtx.colorMode\n  }); // Nested theme providers need to be rerendered after hydration for the correct\n  // color mode to apply.\n\n  const [needsRerender, setNeedsRerender] = useState( // Note: we could also check some \"ssr-enabled\" flag as an optimization for\n  // SPAs, as deeply nested theme providers will also pay a performance penalty\n  // for this SSR bug fix\n  () => {\n    var _newTheme$config;\n\n    return ((_newTheme$config = newTheme.config) == null ? void 0 : _newTheme$config.useLocalStorage) !== false;\n  });\n  useClientsideEffect(() => void setNeedsRerender(false), []);\n  const themeColors = newTheme.rawColors || newTheme.colors;\n  const useCustomProperties = (_newTheme$config2 = newTheme.config) == null ? void 0 : _newTheme$config2.useCustomProperties;\n  const colorVars = useMemo(() => {\n    if (useCustomProperties === false) {\n      return {};\n    }\n\n    const colors = themeColors || {};\n    return css(__createColorProperties(colors, colors.modes || {}))(newTheme);\n  }, [newTheme, themeColors, useCustomProperties]);\n  return /*#__PURE__*/React.createElement(__ThemeUIInternalBaseThemeProvider, {\n    context: { ...outerCtx,\n      theme: newTheme\n    }\n  }, jsx('div', {\n    'data-themeui-nested-provider': true,\n    // the key here ensures that children will be rerendered after color\n    // mode is read from localStorage\n    key: Number(needsRerender),\n    suppressHydrationWarning: true,\n    css: colorVars,\n    children\n  }));\n}\n\nconst ColorModeProvider = ({\n  children\n}) => {\n  const outerCtx = useThemeUI();\n  const isTopLevelColorModeProvider = typeof outerCtx.setColorMode !== 'function';\n  return isTopLevelColorModeProvider ? /*#__PURE__*/React.createElement(TopLevelColorModeProvider, {\n    outerCtx: outerCtx\n  }, children) : /*#__PURE__*/React.createElement(NestedColorModeProvider, {\n    outerCtx: outerCtx\n  }, children);\n};\nconst noflash = `(function() { try {\n  var mode = localStorage.getItem('theme-ui-color-mode');\n  if (!mode) return\n  document.documentElement.classList.add('theme-ui-' + mode);\n} catch (e) {} })();`;\nconst InitializeColorMode = () => jsx('script', {\n  key: 'theme-ui-no-flash',\n  dangerouslySetInnerHTML: {\n    __html: noflash\n  }\n});\n\nexport { ColorModeProvider, InitializeColorMode, useColorMode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}